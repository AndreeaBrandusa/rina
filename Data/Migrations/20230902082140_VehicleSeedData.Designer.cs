// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rina.Data;

#nullable disable

namespace rina.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230902082140_VehicleSeedData")]
    partial class VehicleSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2df3f11a-208c-4adc-b57c-72be8de24bbb",
                            ConcurrencyStamp = "2df3f11a-208c-4adc-b57c-72be8de24bbb",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3e6389ce-8bef-401c-857c-ea774ed51375",
                            ConcurrencyStamp = "3e6389ce-8bef-401c-857c-ea774ed51375",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "fedeb051-fd94-4bd7-8b18-b4cca045083e",
                            ConcurrencyStamp = "fedeb051-fd94-4bd7-8b18-b4cca045083e",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8215d526-aa55-4c3e-a8bc-4b37cd77c11b",
                            RoleId = "fedeb051-fd94-4bd7-8b18-b4cca045083e"
                        },
                        new
                        {
                            UserId = "863b3a5c-0cdb-4054-bd4e-4b4063d24ca1",
                            RoleId = "3e6389ce-8bef-401c-857c-ea774ed51375"
                        },
                        new
                        {
                            UserId = "56380312-f4d8-41da-a03a-4e22f88d62d2",
                            RoleId = "2df3f11a-208c-4adc-b57c-72be8de24bbb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8215d526-aa55-4c3e-a8bc-4b37cd77c11b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1a9130a-b98d-423e-8988-d5d9f4081d8e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEN66hhSfTI0SpcL+OAXSDtEDfzIrxnZ6hJPkD8UjF0fu3CxmW0tJ7wQrUX5TnmjE5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e816c1-c345-4d4b-9c47-5b8a4eb89a74",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "863b3a5c-0cdb-4054-bd4e-4b4063d24ca1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80cae638-7e09-475b-a406-3c3c701b29e6",
                            Email = "driver@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DRIVER",
                            PasswordHash = "AQAAAAEAACcQAAAAECHBs9BqtioiuIKYy0OLDc0ykfmV4Ctl0eSj8a0W3gM7JA2MPz79+kBFFVDukXJRZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "decc4d4e-8aef-4dba-8fc7-bf0a70379f8f",
                            TwoFactorEnabled = false,
                            UserName = "driver"
                        },
                        new
                        {
                            Id = "56380312-f4d8-41da-a03a-4e22f88d62d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc208c1f-eecd-48ae-b295-02683f04f216",
                            Email = "andreea@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREEA",
                            PasswordHash = "AQAAAAEAACcQAAAAELyXh1bOperO/3PCQ/U5NdRNC4z4xZU+d7qh/oRllId5XWt4ahweZLlpPsW8kucKPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "480a133c-4a1c-4c21-913c-92d41f9d3fe7",
                            TwoFactorEnabled = false,
                            UserName = "andreea"
                        });
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        },
                        new
                        {
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = "e934adfc-4c99-4631-b162-1090d2ce38f5",
                            Latitude = 45.74827859010117m,
                            Longitude = 21.21917452835527m,
                            Name = "Piata Maria",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "dd4bda6a-af2a-4969-a3c0-2d61a85c5804",
                            Latitude = 45.75109221785382m,
                            Longitude = 21.22361857206686m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "11095ebb-9e3b-4eb6-90a6-6f4edc0dbd6f",
                            Latitude = 45.75490769991527m,
                            Longitude = 21.221050800524303m,
                            Name = "Spitalul de copii",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "e6ae001f-dfbf-4c68-824d-049e9ae06245",
                            Latitude = 45.75619701680361m,
                            Longitude = 21.221307553237732m,
                            Name = "Brediceanu",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "0fc17ad1-06ed-493c-913f-b017fee39cd2",
                            Latitude = 45.75625163350785m,
                            Longitude = 21.222908892035374m,
                            Name = "Piata Timisoara 700",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "ad1cd307-2e26-4393-a8a9-7285699be395",
                            Latitude = 45.75587250460832m,
                            Longitude = 21.2276939799686m,
                            Name = "Piata Libertatii",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "a8689b1c-280e-4b8c-a1a2-f1ea7e1a618e",
                            Latitude = 45.755749335261136m,
                            Longitude = 21.231858987508456m,
                            Name = "Hotel Continental",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "fc641f5a-ca24-4b8d-83ce-d1791b9cc308",
                            Latitude = 45.75562234744903m,
                            Longitude = 21.238427101113256m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "373c411b-928a-437d-8820-ac97aee23a8e",
                            Latitude = 45.756721582695015m,
                            Longitude = 21.244925698896484m,
                            Name = "3 August 1919",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "a6536c21-6d48-4e2e-b00e-dada1e66daa3",
                            Latitude = 45.75749500845264m,
                            Longitude = 21.24916939645183m,
                            Name = "Piata Traian",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "1b07cd09-7cbd-4126-b5f8-e1b14421620e",
                            Latitude = 45.753010052800356m,
                            Longitude = 21.250171969257572m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "e032bfc6-960d-401f-96c0-0a1f8e773e9e",
                            Latitude = 45.74889039428735m,
                            Longitude = 21.25270156463139m,
                            Name = "Banatim",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "904ecf7b-f515-468b-9747-563fda755c21",
                            Latitude = 45.74715727437089m,
                            Longitude = 21.246582097173373m,
                            Name = "Deliblata",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "507e8d1e-f188-4e0c-888b-15a431849d1c",
                            Latitude = 45.74533430140636m,
                            Longitude = 21.241446790566474m,
                            Name = "Sala Olimpia",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "a0c4e6a7-6c8b-4712-b453-49b4cc55b21f",
                            Latitude = 45.74388560125414m,
                            Longitude = 21.237128709215785m,
                            Name = "Cluj",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "b9f435f1-76bd-45b3-a8bb-fe3f2ff0f825",
                            Latitude = 45.74200588120218m,
                            Longitude = 21.232466650088003m,
                            Name = "Piata Crucii",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "75265763-4bf3-493a-bd7e-7d30d59433ab",
                            Latitude = 45.741762533858214m,
                            Longitude = 21.22514596492361m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "05e26dc5-a033-4245-8b1f-5a5bb3ca2ad3",
                            Latitude = 45.744444574004696m,
                            Longitude = 21.222379518441844m,
                            Name = "Parc Doina",
                            RouteId = "867eab75-1f1c-4742-bf4f-d0d01fae1b2e"
                        },
                        new
                        {
                            Id = "2048477e-e581-48b2-a1f3-287004d9ea9b",
                            Latitude = 45.744444574004696m,
                            Longitude = 21.222379518441844m,
                            Name = "Parc Doina",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "8a0d5e91-9351-43d4-ac2f-92d19a2c8c19",
                            Latitude = 45.741762533858214m,
                            Longitude = 21.22514596492361m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "664ad5b5-6eb3-4068-a3a7-d304ee9f1467",
                            Latitude = 45.74200588120218m,
                            Longitude = 21.232466650088003m,
                            Name = "Piata Crucii",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "96f9e582-e473-4cd3-9ce9-fab5ebd2a921",
                            Latitude = 45.74388560125414m,
                            Longitude = 21.237128709215785m,
                            Name = "Cluj",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "12334e36-8c90-4e4b-bb0b-ec62692d0d87",
                            Latitude = 45.74533430140636m,
                            Longitude = 21.241446790566474m,
                            Name = "Sala Olimpia",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "2ea95114-b9ef-48f1-8572-50e0d644592f",
                            Latitude = 45.74715727437089m,
                            Longitude = 21.246582097173373m,
                            Name = "Deliblata",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "3adfe604-37f1-4612-8725-d71bb490c06c",
                            Latitude = 45.74889039428735m,
                            Longitude = 21.25270156463139m,
                            Name = "Banatim",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "bfea3de7-7c01-478b-b827-cb50616c8502",
                            Latitude = 45.753010052800356m,
                            Longitude = 21.250171969257572m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "bbf2e1bf-107c-4ac6-a452-70f8d25dbb06",
                            Latitude = 45.75749500845264m,
                            Longitude = 21.24916939645183m,
                            Name = "Piata Traian",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "237a4151-8b0b-4ad1-b519-0f4994887fa6",
                            Latitude = 45.756721582695015m,
                            Longitude = 21.244925698896484m,
                            Name = "3 August 1919",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "c3a4a7b0-d4bd-4eb4-85c5-b8a39c42f8d5",
                            Latitude = 45.75562234744903m,
                            Longitude = 21.238427101113256m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "7a8b9f5d-fa19-4ba4-aea4-779c0ec6f4ee",
                            Latitude = 45.755749335261136m,
                            Longitude = 21.231858987508456m,
                            Name = "Hotel Continental",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "ca32c507-7990-40ea-b9fd-15381428aedd",
                            Latitude = 45.75587250460832m,
                            Longitude = 21.2276939799686m,
                            Name = "Piata Libertatii",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "07713569-7388-4cd5-8103-00db588c26bf",
                            Latitude = 45.75625163350785m,
                            Longitude = 21.222908892035374m,
                            Name = "Piata Timisoara 700",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "8039e1cc-2ac1-400e-a26e-915c168c1798",
                            Latitude = 45.75619701680361m,
                            Longitude = 21.221307553237732m,
                            Name = "Brediceanu",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "f918362a-9d23-4bd2-ba15-adc306b40c2c",
                            Latitude = 45.75490769991527m,
                            Longitude = 21.221050800524303m,
                            Name = "Spitalul de copii",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "fee6cc49-ab17-4027-9a28-f85c4e173a90",
                            Latitude = 45.75109221785382m,
                            Longitude = 21.22361857206686m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        },
                        new
                        {
                            Id = "475397c7-3e36-4e85-8d31-9da5ae544813",
                            Latitude = 45.74827859010117m,
                            Longitude = 21.21917452835527m,
                            Name = "Piata Maria",
                            RouteId = "f7e2966e-1b45-4696-8c48-9f73f902c793"
                        });
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2",
                            Latitude = 0m,
                            Longitude = 0m,
                            Name = "6",
                            Type = "Tram"
                        });
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleDriver");

                    b.HasData(
                        new
                        {
                            Id = "3ab9d25f-abc0-4a4c-9e01-6d0c0b01bf8c",
                            DriverId = "863b3a5c-0cdb-4054-bd4e-4b4063d24ca1",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithMany("Routes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.HasOne("rina.Entities.Route", "Route")
                        .WithMany("Stations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", "Driver")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
