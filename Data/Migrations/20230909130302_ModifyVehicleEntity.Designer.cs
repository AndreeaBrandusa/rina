// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rina.Data;

#nullable disable

namespace rina.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230909130302_ModifyVehicleEntity")]
    partial class ModifyVehicleEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "882cacf5-92a6-4567-a517-2173d7089c6a",
                            ConcurrencyStamp = "882cacf5-92a6-4567-a517-2173d7089c6a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "9beeed4b-d556-4454-bdfc-42fb7ee52514",
                            ConcurrencyStamp = "9beeed4b-d556-4454-bdfc-42fb7ee52514",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "826edf02-be96-4354-a3b9-76be2dae239b",
                            ConcurrencyStamp = "826edf02-be96-4354-a3b9-76be2dae239b",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "54a34540-f11d-4b99-a1a7-c5b0869c90b0",
                            RoleId = "826edf02-be96-4354-a3b9-76be2dae239b"
                        },
                        new
                        {
                            UserId = "f0efd0a3-6dec-4765-bc33-3d25f126f8d9",
                            RoleId = "9beeed4b-d556-4454-bdfc-42fb7ee52514"
                        },
                        new
                        {
                            UserId = "4aa81014-cdb0-4ae2-8b12-f28addfd1f62",
                            RoleId = "882cacf5-92a6-4567-a517-2173d7089c6a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "54a34540-f11d-4b99-a1a7-c5b0869c90b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bb99aae-1bb4-4dc9-84b0-337da034c1d0",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPTnlTWhYhb/rsz3rGtLkcErvyHYu/tX2HcUiHpwYq7RqvziuW4O8GolCIBKtOF/8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49775fc8-7995-4599-8a98-5f98dfcde76d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f0efd0a3-6dec-4765-bc33-3d25f126f8d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3e38952-7c1f-47e9-9308-70795114cd3f",
                            Email = "driver@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DRIVER",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKarOAR5ogzGIbXxJiUnb8VomxkVKr1q55JHAK7+ktaI4iT2kSjmYWZCbv059zEUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fb0a1c0-58a4-41c5-b57d-a733e395b627",
                            TwoFactorEnabled = false,
                            UserName = "driver"
                        },
                        new
                        {
                            Id = "4aa81014-cdb0-4ae2-8b12-f28addfd1f62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92cbc211-3942-4dac-8c4b-0badb6ec8796",
                            Email = "andreea@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREEA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHPdP/U+xFGKubeyFChPXK+4ZteczJ0Wgd771xMiY/Tv+lJWPPO9t+u0i8MpcL2k9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca02c2af-9aab-43eb-af45-6c85d8200022",
                            TwoFactorEnabled = false,
                            UserName = "andreea"
                        });
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        },
                        new
                        {
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = "4883d0c3-6c2f-4975-8c15-869da4dd41d0",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "4b198deb-ddd6-427b-bb81-e17e8499e03b",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "d5a02bda-350b-47d2-b911-608d8995e00f",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "bd4b842e-aa26-4b6b-8355-fc7649c93632",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "9a78197b-456f-47c7-8d6b-4af6e75825f6",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "a2c2863a-68d3-4a86-9340-5ed594e2158b",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "fd4d744a-dd5e-44f3-bee9-4b3e384f389e",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "eb402b4d-cf60-417f-b3cc-2d4bd3580075",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "79c1cacc-4330-43bc-b4c4-68d3f461bb5b",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "c584f7b5-e730-424b-b76d-2f8f07071532",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "e4684cc4-4211-43be-9776-0903799b4339",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "6107253e-7306-4a43-8101-1811fc1c97d7",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "37ec3e4b-2a79-40cf-a575-582a32f8f4bc",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "8b4a5b55-fbee-4dd8-b207-fb13a2391ad3",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "3b3c135d-604b-4ad3-adb4-6cf79a1468a6",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "9eef5191-5e60-405a-9e3f-f7e5e933b91e",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "133a6f80-0660-4f6f-a8ed-50d5f6db9e15",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "e71a87ad-470e-4f68-8a5c-e0737c0aa1fe",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f"
                        },
                        new
                        {
                            Id = "fe20e999-a9b2-47b3-9008-f741fd04ade5",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "deb0ff31-bd0a-47d5-8d1a-67f3601c54c2",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "238608bc-e193-408f-b0b3-0544bbe58b86",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "6e02e0e9-c81a-417c-8d4d-706ff630342f",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "ebc43d54-12ed-4c2c-b7b3-211764011c12",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "97dfc4c7-1ebc-4f20-8319-32211796d9be",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "00d2884c-8ee8-4e46-81d9-77c866a654c8",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "c16ff471-9c9e-4a67-a55d-28bb82011f7d",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "9197c5b3-cdd3-42b6-bdc9-7d98d6102803",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "34eb3f68-da72-4bd0-a577-2c452c538d3e",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "ebc3df25-1080-43c0-9b35-a91212ff1196",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "c5caf246-2922-4f35-a463-992bdf34074b",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "9bb15c24-8049-4eb5-92f9-00494c92a00f",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "8ff7a375-6543-404a-9026-1d07c79265c8",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "b4204abd-8829-4f15-875a-7ca14a58a066",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "8cdccd81-1a76-4eee-853d-fbd5555c0070",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "d2ad6010-ed86-402f-888a-a07c31374f7b",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        },
                        new
                        {
                            Id = "0e6ef67e-63fc-45d2-99d0-2bc0cc715b8e",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "81fe3273-f393-451f-b81c-1dd7a9395c66"
                        });
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2",
                            Latitude = 0m,
                            Longitude = 0m,
                            Name = "6",
                            RouteId = "33e223ce-0f23-4197-9bce-4c357edde27f",
                            Type = "Tram"
                        });
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleDriver");

                    b.HasData(
                        new
                        {
                            Id = "c4c1c951-b95c-4db5-94f8-eb9375be05c4",
                            DriverId = "f0efd0a3-6dec-4765-bc33-3d25f126f8d9",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithMany("Routes")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.HasOne("rina.Entities.Route", "Route")
                        .WithMany("Stations")
                        .HasForeignKey("RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", "Driver")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
