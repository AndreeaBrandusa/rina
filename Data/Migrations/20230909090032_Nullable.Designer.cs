// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rina.Data;

#nullable disable

namespace rina.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230909090032_Nullable")]
    partial class Nullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2b6db879-996c-4bf6-8b5b-d56071f086b5",
                            ConcurrencyStamp = "2b6db879-996c-4bf6-8b5b-d56071f086b5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "e1891063-4235-4dfa-a3ac-75fbd36272f7",
                            ConcurrencyStamp = "e1891063-4235-4dfa-a3ac-75fbd36272f7",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "c375e735-0ec0-45ff-a2af-3a2698da9cd9",
                            ConcurrencyStamp = "c375e735-0ec0-45ff-a2af-3a2698da9cd9",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fcb33a2b-eb03-4d78-950a-226ba43549c3",
                            RoleId = "c375e735-0ec0-45ff-a2af-3a2698da9cd9"
                        },
                        new
                        {
                            UserId = "f7ecd26c-27b2-40e8-9f36-d1b9091b7a3b",
                            RoleId = "e1891063-4235-4dfa-a3ac-75fbd36272f7"
                        },
                        new
                        {
                            UserId = "a8f23a8e-560b-49b2-9141-f54511489dc5",
                            RoleId = "2b6db879-996c-4bf6-8b5b-d56071f086b5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fcb33a2b-eb03-4d78-950a-226ba43549c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5e32ccc-305a-4386-b8f4-1ed49fc573fb",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHfRj63YXPHjmyFIilZiR3os5N4+TuqFma4/aGl7crXBWg7KRJdSQEnBfBMmFeUog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "997946bd-c2c7-429c-b170-a673109f21dc",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f7ecd26c-27b2-40e8-9f36-d1b9091b7a3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "322052ac-0f5d-4645-b733-775e2e8491a2",
                            Email = "driver@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DRIVER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEXs4/HebA10vktnOgNTZRaZ42ujXce+3uY4/RxlBYo0MrnJc7EYVkn+TPYzWjjQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb841d50-0f27-4b0a-a8f7-85e0c287b52f",
                            TwoFactorEnabled = false,
                            UserName = "driver"
                        },
                        new
                        {
                            Id = "a8f23a8e-560b-49b2-9141-f54511489dc5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a609956-061b-45fc-b023-4441c3a19727",
                            Email = "andreea@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREEA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJC/cwWMRcpUyz3TTcDxlRBiekbyUf2HxQD1JQ3kFEQKioFu+Y1ViRu3IVWXz/t5lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab4e889e-e200-4630-afda-d17d4b9d1ebc",
                            TwoFactorEnabled = false,
                            UserName = "andreea"
                        });
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        },
                        new
                        {
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = "acf1797f-f3b0-49cb-9eb9-43a94056c82f",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "867d592d-9d43-486a-8a32-046efa477398",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "01aa1d52-0313-4829-b0d1-ac0fc253c31d",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "d327ff09-4e30-4294-9863-acb3b838d7d8",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "166379df-d2fd-4b8e-862b-708e22bb7271",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "1fbcf885-450d-4f6a-b32f-c427a9590c9a",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "e84c4235-b918-43de-9532-82f5528497bd",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "4876094f-a4e2-4989-8ce4-4c7e990b9cbd",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "8ea0fee5-4860-4f2a-94c3-8ee874b95d09",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "c0dc6797-f867-432d-8895-4258431e7bff",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "10156372-88d3-42aa-b2ff-562e10300baf",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "95a7e4aa-c04b-420e-be1d-c07d78367353",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "d682f8b9-a558-46a8-8a2e-1977678e3348",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "eb3ca933-2b63-4c46-97db-7c4280924e0c",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "00f212c3-05ed-48bd-9760-5c1b9e6c9bf7",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "a48ba6a8-8e88-411c-9a15-ab0160a4a01c",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "ed3b0594-f0d9-4eba-8439-3f4fc6585942",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "257fd8f9-3b31-4e4e-b431-52ce7b6f8d55",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "6c0b91ea-886b-4ab5-9672-2ec8a27d4151"
                        },
                        new
                        {
                            Id = "42cb0289-9186-4bb7-8ab7-54890e61fb14",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "ea1ab24a-f799-4998-a86e-e2f9e020d5b8",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "67db8011-c38b-4330-8deb-aa64b0f2fa8d",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "af74207e-1a14-405d-b4cc-c18c98e2ca11",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "9886b22a-5ec8-47ad-bee6-63189e5d0b9e",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "d810afc8-af36-47b4-837b-d6ae5a42903d",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "5e281ce4-f394-40e3-8ce5-2a4fffbed4a2",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "36fd5ec9-2609-4132-8cfc-1ff49be097e8",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "9dea5233-98c9-4bb2-9f9e-2036a1c9234a",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "dad12939-bdca-461a-ac59-e88d42488d90",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "614faa20-5903-41fc-b578-f4afc5634343",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "ce384475-35dd-46b5-905c-485318c73c9f",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "5dc85c72-08a0-45cd-a382-cd529c852412",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "a30744e4-a372-4d47-b299-47796e06801e",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "69be7f17-6029-4f61-92ee-88086239ec5e",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "57e58080-75da-445b-9e50-e9c41704fe8e",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "5e3a8a07-89b9-41d8-951f-c2242c331d22",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        },
                        new
                        {
                            Id = "a79866d2-9d8e-499b-915a-2fbb86b74a85",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "056ff285-3997-43dc-81a8-6a2dd7b0917c"
                        });
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2",
                            Latitude = 0m,
                            Longitude = 0m,
                            Name = "6",
                            Type = "Tram"
                        });
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleDriver");

                    b.HasData(
                        new
                        {
                            Id = "e7ea6fb6-171b-4c18-9cf1-d02f8b26ec5e",
                            DriverId = "f7ecd26c-27b2-40e8-9f36-d1b9091b7a3b",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithMany("Routes")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.HasOne("rina.Entities.Route", "Route")
                        .WithMany("Stations")
                        .HasForeignKey("RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", "Driver")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
