// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rina.Data;

#nullable disable

namespace rina.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e95c8a0e-8a76-4513-8c1c-c03f044970ce",
                            ConcurrencyStamp = "e95c8a0e-8a76-4513-8c1c-c03f044970ce",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4ca3074b-4eca-4860-9e07-7653d8b2c943",
                            ConcurrencyStamp = "4ca3074b-4eca-4860-9e07-7653d8b2c943",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "b91737af-72ec-4d5d-b92d-860373ac9ae6",
                            ConcurrencyStamp = "b91737af-72ec-4d5d-b92d-860373ac9ae6",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "95277226-4972-44df-ace6-c7e9d513bb1a",
                            RoleId = "b91737af-72ec-4d5d-b92d-860373ac9ae6"
                        },
                        new
                        {
                            UserId = "ee7c7819-c7b4-4536-93a9-c12fdd0341cd",
                            RoleId = "4ca3074b-4eca-4860-9e07-7653d8b2c943"
                        },
                        new
                        {
                            UserId = "5adb1532-5c22-4874-8d16-edb976cb9db0",
                            RoleId = "e95c8a0e-8a76-4513-8c1c-c03f044970ce"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "95277226-4972-44df-ace6-c7e9d513bb1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "affbc151-0ca0-40f3-b8dc-4b166be087c4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAZ9XPNqzfqvkrFCgI3vO3gfzgm/0YZQYJTTu5rHHot/49D1WLpDLTk2yECKV7mZsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81a75e0f-2afc-4508-b74b-f2e1907ae1da",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ee7c7819-c7b4-4536-93a9-c12fdd0341cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb16e60d-a5c5-4ba8-9f15-f512297145f7",
                            Email = "driver@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "DRIVER",
                            PasswordHash = "AQAAAAEAACcQAAAAEA9e7UM1YbJMBjaFityxJTNYclfEtfTi6dg4rM6dbn2YyLaLrTtrDuxp8XufOntjuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc3e68ef-a56b-466e-befc-7322c667972e",
                            TwoFactorEnabled = false,
                            UserName = "driver"
                        },
                        new
                        {
                            Id = "5adb1532-5c22-4874-8d16-edb976cb9db0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7e3426-7c3f-451b-8241-7fee2f109f69",
                            Email = "andreea@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ANDREEA",
                            PasswordHash = "AQAAAAEAACcQAAAAEKf3/sLPDSjPbqomNpMVfHOoa54vbhrx3LW3GVlb2QGCKkW8+qbMSN0xZ5jWy9BfoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "feaa3c6f-0465-4172-8e3c-00ab324e4bc6",
                            TwoFactorEnabled = false,
                            UserName = "andreea"
                        });
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RouteId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        },
                        new
                        {
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = "8e0bf118-107e-4573-b1a6-f4a069a6fda5",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "4810761d-df3c-4571-8b38-a809b9d2a8cc",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "85ce0a45-d63a-42db-bcb6-bfd80ddf09cb",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "21e1f9f4-0f9f-465f-981a-a2ddf8d8d4f4",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "4c59a3ac-50a6-4804-ae7d-5411b98ce1c7",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "30b4ccf8-72e9-4468-b15d-b22265c61523",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "12df9d88-e8a6-45e0-ade4-626548499fcc",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "af7d122b-e763-4c6f-aee3-5419f2d3c7a1",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "1245d71c-77d4-4ddf-8e27-e0150bf62ffb",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "b2a62431-a259-4f15-9857-79fd886df737",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "06a23620-e98d-47bf-87d9-bdbc843ffd6c",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "f2fe1403-1a74-47d7-9e72-d4e949c4b502",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "b3723f00-dcb0-4264-a050-e83486b4454b",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "ae02a3b0-f2bd-4ad7-bd79-56246ac58bf3",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "d930934e-675f-486f-ab67-29f548c12261",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "2178904b-845a-4782-8506-35bfcb3efdd9",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "d59fb59e-a969-4000-a471-2a90069949f5",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "f05caf53-a02e-4b28-9b30-ea1991655002",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "5a13500d-c8d2-44e1-a6e4-50f1264384a7"
                        },
                        new
                        {
                            Id = "607ab9fb-22e5-49b2-9f7b-d8231c4033a3",
                            Latitude = 457444445740046.96000000000000m,
                            Longitude = 212223795184418.44000000000000m,
                            Name = "Parc Doina",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "edf53b8b-ed23-45a1-821f-a8d7891254d2",
                            Latitude = 457417625338582.14000000000000m,
                            Longitude = 212251459649236.10000000000000m,
                            Name = "Piata Nicolae Balcescu",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "b64be284-7862-462a-83ce-971e6f91e69c",
                            Latitude = 457420058812021.80000000000000m,
                            Longitude = 212324666500880.03000000000000m,
                            Name = "Piata Crucii",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "b5d57f83-5aae-4120-aeea-66c72ca9499a",
                            Latitude = 457438856012541.40000000000000m,
                            Longitude = 212371287092157.85000000000000m,
                            Name = "Cluj",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "214ee824-ef4a-42ec-93cd-885ba30d2218",
                            Latitude = 457453343014063.60000000000000m,
                            Longitude = 212414467905664.74000000000000m,
                            Name = "Sala Olimpia",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "756e687e-4e1c-4010-af03-b5a46f3ea07c",
                            Latitude = 457471572743708.90000000000000m,
                            Longitude = 212465820971733.73000000000000m,
                            Name = "Deliblata",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "be7c3a69-9418-4693-a6eb-4302f9612bcf",
                            Latitude = 457488903942873.50000000000000m,
                            Longitude = 212527015646313.90000000000000m,
                            Name = "Banatim",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "95847550-6ebb-4391-adf5-d1e03931c5b6",
                            Latitude = 457530100528003.56000000000000m,
                            Longitude = 212501719692575.72000000000000m,
                            Name = "Fabrica De Bere Timisoara",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "afb5c4c2-586e-40f9-a7cd-200e49f3a8cb",
                            Latitude = 457574950084526.40000000000000m,
                            Longitude = 212491693964518.30000000000000m,
                            Name = "Piata Traian",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "a342fd32-2f27-465f-94ae-a1acfa6d32ec",
                            Latitude = 457567215826950.15000000000000m,
                            Longitude = 212449256988964.84000000000000m,
                            Name = "3 August 1919",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "1f673bc4-2153-470f-a41e-70c5bfc4ea9c",
                            Latitude = 457556223474490.30000000000000m,
                            Longitude = 212384271011132.56000000000000m,
                            Name = "Prefectura Judetului Timis",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "127e82dc-08af-4d3d-a9b4-c7e9b892a798",
                            Latitude = 457557493352611.36000000000000m,
                            Longitude = 212318589875084.56000000000000m,
                            Name = "Hotel Continental",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "4635b9f8-7b5c-4dfa-a313-6a97e7cd590d",
                            Latitude = 457558725046083.20000000000000m,
                            Longitude = 212276939799686.0000000000000m,
                            Name = "Piata Libertatii",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "8c000224-66d1-4447-a7be-1b0e9885b0db",
                            Latitude = 457562516335078.50000000000000m,
                            Longitude = 212229088920353.74000000000000m,
                            Name = "Piata Timisoara 700",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "1c464244-2c9f-4b07-ac7c-88749b366f26",
                            Latitude = 457561970168036.10000000000000m,
                            Longitude = 212213075532377.32000000000000m,
                            Name = "Brediceanu",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "88a43c06-2ffb-499e-a8b5-19fb6d3e1198",
                            Latitude = 457549076999152.70000000000000m,
                            Longitude = 212210508005243.03000000000000m,
                            Name = "Spitalul de copii",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "eb42d258-c3e9-4f54-8253-ad979beb67b0",
                            Latitude = 457510922178538.20000000000000m,
                            Longitude = 212236185720668.60000000000000m,
                            Name = "Catedrala Metropolitana",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        },
                        new
                        {
                            Id = "fa96cc29-2639-44bc-884a-99e4f94748bb",
                            Latitude = 457482785901011.70000000000000m,
                            Longitude = 212191745283552.70000000000000m,
                            Name = "Piata Maria",
                            RouteId = "b2fee434-d8c6-400f-a932-ab9a394449a5"
                        });
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2",
                            Latitude = 0m,
                            Longitude = 0m,
                            Name = "6",
                            Type = "Tram"
                        });
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleDriver");

                    b.HasData(
                        new
                        {
                            Id = "cbf156ef-ee35-4ce2-857a-71d25d0c9243",
                            DriverId = "ee7c7819-c7b4-4536-93a9-c12fdd0341cd",
                            VehicleId = "2253d4b4-edba-4041-a314-22968193faf2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithMany("Routes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.Station", b =>
                {
                    b.HasOne("rina.Entities.Route", "Route")
                        .WithMany("Stations")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("rina.Entities.VehicleDriver", b =>
                {
                    b.HasOne("rina.Entities.ApplicationUser", "Driver")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rina.Entities.Vehicle", "Vehicle")
                        .WithOne("VehicleDriver")
                        .HasForeignKey("rina.Entities.VehicleDriver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("rina.Entities.ApplicationUser", b =>
                {
                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });

            modelBuilder.Entity("rina.Entities.Route", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("rina.Entities.Vehicle", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("VehicleDriver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
