@*for search*@
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">
@*for destination*@
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" type="text/css">
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.css' type='text/css' />

<div id="map"></div>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYW5kcmVlYS1icmFuZHVzYSIsImEiOiJjbGd0dGFwdzIwMjA1M3JrOHF3ZmR2N3NvIn0.tP1VOcDml_MHwvq98KkL6g';
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v12', // style URL
        center: [21.227585019976573, 45.75733446053322], // starting position [lng, lat]
        zoom: 12.5 // starting zoom
    });

    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    // Add geolocate control to the map
    map.addControl(
        new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            // When active the map will receive updates to the device's location as it changes.
            trackUserLocation: true,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: true
        })
    );

</script>

@if (User.IsInRole("Administrator"))
{
    <script>
        map.getCanvas().style.cursor = 'default';
    </script>
}

@if (User.IsInRole("Driver"))
{
    <div class="left-container">
        <input id="vehicleNameInput" type="text" placeholder="enter vehicle name">

        <button id="btn" class="btn btn-outline-success my-2 my-sm-0" type="button" style="float: right; margin-top: 5px!important;">
            Navigate
        </button>


        <fieldset id="breakdownReason" class="p-3" style="border: 2px solid #ad5049; margin-top: 60vh; margin-bottom: 10vh;">
            <legend class="float-none w-auto px-3" style="text-align: left; font-size: 0.9rem; color: white;">
                Select breakdown reason
            </legend>
            <select name="delayReason" id="select" autocomplete="off" required style="width: 100%; padding: 5px 0 5px 0; color: gray;">
                <option>Traffic</option>
                <option>Flat tire</option>
                <option>Engine breakdown</option>
                <option>Got in an accident</option>
                <option>No fuel</option>
                <option>Other</option>
            </select>
        </fieldset>
    </div>

    <script>
        var currentMarkers=[];

        const btn = document.getElementById('btn');
        // Toggle button text on click
        btn.addEventListener('click', function handleClick() {
            //display_stations();
            const initialText = 'Navigate';

            if (btn.textContent.toLowerCase().includes(initialText.toLowerCase())) {
                btn.textContent = 'End trip';
            } else {
                btn.textContent = initialText;
                //display_stations();
            }
        });


        document.addEventListener('DOMContentLoaded', function () {
            const btn = document.getElementById('btn');
            const vehicleNameInput = document.getElementById('vehicleNameInput');

            btn.addEventListener('click', function () {
                const vehicleName = vehicleNameInput.value;

                fetch(`/Route/GetRouteByVehicleName/?vehicleName=${vehicleName}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response error');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data) {
                            // Display the result in the console
                            console.log('Route ID:', data.routeId);
                            display_stations(data.routeId);
                        } else {
                            console.log('Route not found');
                        }
                    })
                    .catch(error => {
                        // Handle any errors here
                        console.log('An error occurred while fetching data');
                        console.error('Fetch error:', error);
                    });
            });
        });


        function display_stations(routeId) {
            fetch(`/Station/GetStations/?routeId=${routeId}`)
                .then(response => response.json())
                .then(data => get_stations(data["$values"]))
                .catch(error => console.error('Unable to get stations', error));
        }

        const lineString = {
            "type": "LineString",
            "coordinates": []
        }

        function get_stations(stations) {
            var marker;
            marker = new mapboxgl.Marker({
                color: '#bf5d56',
                scale: 1.2,
                type: 'Point'
            })
            .setLngLat([stations[0].longitude, stations[0].latitude])
            .addTo(map)
            currentMarkers.push(marker);

            for (let i = 1; i < stations.length; i++){
                coords = `${stations[i].longitude},${stations[i].latitude};${stations[i-1].longitude},${stations[i-1].latitude}`;
                console.log(coords);

                marker = new mapboxgl.Marker({
                    color: '#bf5d56',
                    scale: 1.2,
                    type: 'Point'
                })
                .setLngLat([stations[i].longitude, stations[i].latitude])
                .addTo(map)
                currentMarkers.push(marker);

                getMatch(coords, i, stations.length);
            }
        }

        function getMatch(coords, i, stationsLength) {
            fetch(
                `https://api.mapbox.com/directions/v5/mapbox/driving/${coords}?access_token=${mapboxgl.accessToken}`,
                { method: 'GET' }
            )
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                var route = data.routes[0].geometry;
                var decodedRoute = polyline.toGeoJSON(route);

                console.log(decodedRoute);
                lineString.coordinates.push(decodedRoute.coordinates);

                if (i == stationsLength - 1) {
                    addRoute(decodedRoute);
                }
            });
  
        }

        function addRoute(decodedRoute) {
            // If a route is already loaded, remove it
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route');
                if (currentMarkers!==null) {
                    for (var i = currentMarkers.length - 1; i >= 0; i--) {
                      currentMarkers[i].remove();
                    }
                }
            } else {
                map.addSource('route', {
                    'type': 'geojson',
                    'data': {
                        'type': 'Feature',
                        'properties': {},
                        'geometry': decodedRoute
                    }
                });
                map.addLayer({
                    'id': 'route',
                    'type': 'line',
                    'source': 'route',
                    'layout': {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    'paint': {
                        'line-color': '#bf5d56',
                        'line-width': 8,
                        'line-opacity': 0.8
                    }
                });
            }
        }
    </script>
}

@if (User.IsInRole("User"))
{
    <div class="left-container">
        @*<input type="text" id="currentLocation" placeholder="enter starting point">*@
        <input id="vehicleNameInput" type="text" placeholder="search for vehicle route">

        <button id="btn" class="btn btn-outline-success my-2 my-sm-0" type="button" style="float: right; margin-top: 5px!important;">
            Search
        </button>
    </div>

    <script>
        var currentMarkers=[];
        
        const btn = document.getElementById('btn');
        // Toggle button text on click
        btn.addEventListener('click', function handleClick() {
              const initialText = 'Search';

            if (btn.textContent.toLowerCase().includes(initialText.toLowerCase())) {
                    btn.textContent = 'Remove route';
                } else {
                    btn.textContent = initialText;
            }
        });


        document.addEventListener('DOMContentLoaded', function () {
            const btn = document.getElementById('btn');
            const vehicleNameInput = document.getElementById('vehicleNameInput');

            btn.addEventListener('click', function () {
                const vehicleName = vehicleNameInput.value;

                fetch(`/Route/GetRouteByVehicleName/?vehicleName=${vehicleName}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response error');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data) {
                            // Display the result in the console
                            console.log('Route ID:', data.routeId);
                            display_stations(data.routeId);
                        } else {
                            console.log('Route not found');
                        }
                    })
                    .catch(error => {
                        // Handle any errors here
                        console.log('An error occurred while fetching data');
                        console.error('Fetch error:', error);
                    });
            });
        });


        function display_stations(routeId) {
            fetch(`/Station/GetStationsForUser/?routeId=${routeId}`)
                .then(response => response.json())
                .then(data => get_stations(data["$values"]))
                .catch(error => console.error('Unable to get stations', error));
        }

        const lineString = {
            "type": "LineString",
            "coordinates": []
        }

        function get_stations(stations) {
            var marker;
            marker = new mapboxgl.Marker({
                color: '#bf5d56',
                scale: 1.2,
                type: 'Point'
            })
            .setLngLat([stations[0].longitude, stations[0].latitude])
            .addTo(map)
            currentMarkers.push(marker);

            for (let i = 1; i < stations.length; i++){
                coords = `${stations[i].longitude},${stations[i].latitude};${stations[i-1].longitude},${stations[i-1].latitude}`;
                console.log(coords);

                marker = new mapboxgl.Marker({
                    color: '#bf5d56',
                    scale: 1.2,
                    type: 'Point'
                })
                .setLngLat([stations[i].longitude, stations[i].latitude])
                .addTo(map)
                currentMarkers.push(marker);

                getMatch(coords, i, stations.length);
            }
        }

        function getMatch(coords, i, stationsLength) {
            fetch(
                `https://api.mapbox.com/directions/v5/mapbox/driving/${coords}?access_token=${mapboxgl.accessToken}`,
                { method: 'GET' }
            )
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                var route = data.routes[0].geometry;
                var decodedRoute = polyline.toGeoJSON(route);

                console.log(decodedRoute);
                lineString.coordinates.push(decodedRoute.coordinates);

                if (i == stationsLength - 1) {
                    addRoute(decodedRoute);
                }
            });
        }

        function addRoute(decodedRoute) {
            // If a route is already loaded, remove it
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route');
                if (currentMarkers!==null) {
                    for (var i = currentMarkers.length - 1; i >= 0; i--) {
                      currentMarkers[i].remove();
                    }
                }
            } else {
                map.addSource('route', {
                    'type': 'geojson',
                    'data': {
                        'type': 'Feature',
                        'properties': {},
                        'geometry': decodedRoute
                    }
                });
                map.addLayer({
                    'id': 'route',
                    'type': 'line',
                    'source': 'route',
                    'layout': {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    'paint': {
                        'line-color': '#bf5d56',
                        'line-width': 8,
                        'line-opacity': 0.8
                    }
                });
            }
        }
    </script>
}