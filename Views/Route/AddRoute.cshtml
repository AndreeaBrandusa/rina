@using rina.Models.Route
@model RouteModel

<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.css' type='text/css' />


<div id="map"></div>

<div class="left-container" style="position: relative;">
    <div id="stations">

    </div>

    <form asp-action="AddRoute" id="AddRoute">
        <h3 style="text-align: center; margin-bottom: 5vh; color: white; font-size: 1.1rem;">ADD ROUTE</h3>

        <div class="stations-container" style="overflow-y: auto; height: 65vh;">
            <fieldset class="stations p-2" style="border: 1px solid #ad5049; margin-top: 10px; /*display: flex; justify-content: space-between;*/ align-items: center;">
                <legend class="float-none w-auto px-3" style="text-align: left; font-size: 1.1rem; color: #91403a;">
                    Station #1
                </legend>
                <input asp-for="Stations" id="stationName1" type="text" placeholder="station name">
                <input asp-for="Stations" id="stationLat1" type="text" placeholder="station latitude">
                <input asp-for="Stations" id="stationLong1" type="text" placeholder="station longitude">
            </fieldset>
        </div>

        <div id="stationInputs">
            
        </div>

        <button type="button" id="send-btn" class="btn" style="position: relative; margin: 5vh 0 0 0; float: right;">Add Route</button>
    </form>
</div>


<script>
    // Add your Mapbox access token
    mapboxgl.accessToken = 'pk.eyJ1IjoiYW5kcmVlYS1icmFuZHVzYSIsImEiOiJjbGd0dGFwdzIwMjA1M3JrOHF3ZmR2N3NvIn0.tP1VOcDml_MHwvq98KkL6g';
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/streets-v12', // style URL
        center: [21.213444, 45.754082], // starting position [lng, lat]
        zoom: 12.5 // starting zoom
    });

    const draw = new MapboxDraw({
        // Instead of showing all the draw tools, show only the line string and delete tools
        displayControlsDefault: false,
        controls: {
            line_string: true,
            trash: true
        },
        // Set the draw mode to draw LineStrings by default
        defaultMode: 'draw_line_string',
        styles: [
            // Set the line style for the user-input coordinates
            {
            'id': 'gl-draw-line',
            'type': 'line',
            'filter': [
                'all',
                ['==', '$type', 'LineString'],
                ['!=', 'mode', 'static']
            ],
            'layout': {
                'line-cap': 'round',
                'line-join': 'round'
            },
            'paint': {
                'line-color': '#438EE4',
                'line-dasharray': [0.2, 2],
                'line-width': 2,
                'line-opacity': 0.7
            }
            },
            // Style the vertex point halos
            {
            'id': 'gl-draw-polygon-and-line-vertex-halo-active',
            'type': 'circle',
            'filter': [
                'all',
                ['==', 'meta', 'vertex'],
                ['==', '$type', 'Point'],
                ['!=', 'mode', 'static']
            ],
            'paint': {
                'circle-radius': 12,
                'circle-color': '#FFF'
            }
            },
            // Style the vertex points
            {
            'id': 'gl-draw-polygon-and-line-vertex-active',
            'type': 'circle',
            'filter': [
                'all',
                ['==', 'meta', 'vertex'],
                ['==', '$type', 'Point'],
                ['!=', 'mode', 'static']
            ],
            'paint': {
                'circle-radius': 8,
                'circle-color': '#438EE4'
            }
            }
        ]
    });

    const button = document.getElementById("send-btn");
    button.addEventListener("click", sendStations);

    // Add the draw tool to the map
    map.addControl(draw);

    // Add create, update, or delete actions
    map.on('click', showCoordinates);
    map.on('draw.create', updateRoute);
    map.on('draw.update', updateRoute);
    map.on('draw.delete', removeRoute);

    function getStationElements(index) {
        return `<fieldset class="stations" class="p-2" style="border: 1px solid #ad5049; margin-top: 10px; align-items: center;">
            <legend class="float-none w-auto px-3" style="text-align: left; font-size: 1.1rem; color: #91403a;">
                Station #${index}
            </legend>
            <input id="stationName${index}" type="text" placeholder="station name">
            <input id="stationLat${index}" type="text" placeholder="station latitude">
            <input id="stationLong${index}" type="text" placeholder="station longitude">
        </fieldset>`;
    }

    function showCoordinates() {
        const data = draw.getAll();
        const coords = data.features.at(-1).geometry.coordinates;
        const index = coords.length - 2;

        let nameInput;
        let latInput;
        let longInput;
        console.log(coords, index);

        if(index === 0) {
            latInput = document.getElementById("stationLat1");
            longInput = document.getElementById("stationLong1");
        }
        else {
            stationsContainer = document.getElementsByClassName("stations-container")[0];
            stationsContainer.insertAdjacentHTML("beforeend",  getStationElements(index + 1))

            latInput = document.getElementById(`stationLat${index + 1}`);
            longInput = document.getElementById(`stationLong${index + 1}`);
        }

        latInput.value = coords[index][1];
        longInput.value = coords[index][0];
    }

    // Use the coordinates you just drew to make the Map Matching API request
    function updateRoute() {
        removeRoute(); // Overwrite any existing layers

        const profile = 'driving'; // Set the profile

        // Get the coordinates
        const data = draw.getAll();
        const lastFeature = data.features.length - 1;
        const coords = data.features[lastFeature].geometry.coordinates;

        // Format the coordinates
        const newCoords = coords.join(';');

        // Set the radius for each coordinate pair to 25 meters
        const radius = coords.map(() => 25);
        getMatch(newCoords, radius, profile);
    }

    // Make a Map Matching request
    async function getMatch(coordinates, radius, profile) {
        // Separate the radiuses with semicolons
        const radiuses = radius.join(';');

        // Create the query
        const query = await fetch(
            `https://api.mapbox.com/matching/v5/mapbox/${profile}/${coordinates}?geometries=geojson&radiuses=${radiuses}&steps=true&access_token=${mapboxgl.accessToken}`,
            { method: 'GET' }
        );
        const response = await query.json();

        // Handle errors
        if (response.code !== 'Ok') {
            alert(
            `${response.code} - ${response.message}.\n\nFor more information: https://docs.mapbox.com/api/navigation/map-matching/#map-matching-api-errors`
            );
            return;
        }
        const coords = response.matchings[0].geometry;

        // Draw the route on the map
        addRoute(coords);
    }

    // Draw the Map Matching route as a new layer on the map
    function addRoute(coords) {
        // If a route is already loaded, remove it
        if (map.getSource('route')) {
            map.removeLayer('route');
            map.removeSource('route');
        } else {
            map.addLayer({
            'id': 'route',
            'type': 'line',
            'source': {
                'type': 'geojson',
                'data': {
                'type': 'Feature',
                'properties': {},
                'geometry': coords
                }
            },
            'layout': {
                'line-join': 'round',
                'line-cap': 'round'
            },
            'paint': {
                'line-color': '#bf5d56',
                'line-width': 8,
                'line-opacity': 0.8
            }
            });
        }
    }

    // If the user clicks the delete draw button, remove the layer if it exists
    function removeRoute() {
        if (!map.getSource('route')) return;
        map.removeLayer('route');
        map.removeSource('route');
    }

    async function sendStations() {
        const stations = document.getElementsByClassName("stations");
        const stationsList = [];

        for (let i = 0; i < stations.length; i++) {
            const name = document.getElementById(`stationName${i + 1}`);
            const lat = document.getElementById(`stationLat${i + 1}`);
            const long = document.getElementById(`stationLong${i + 1}`);

            stationsList.push({
                "Name": name.value,
                "Latitude": lat.value,
                "Longitude": long.value
            });
        }

        const data = {
            "Stations": stationsList
        }

        console.log(data);
        response = await fetch("/Route/AddRoute", {
            "method": "post",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            alert("Route added succesfully.")
        }
        else {
            alert("There was an error adding the route.");
        }

        window.location.reload();
    }
</script>
